
New questions:
- Explain @Provides vs regular @Inject.  Seems like it is used when you need to create with new.  Why?  Allows
objects you create with new to be added into the DI chain?  Why not just use a regular class?


Answered Questions:
- What's with Web.xml and the Servlet 3.x spec?  Many of the tutorials configure this through code, but
in CS we still seem to use Web.xml.  Why?  Force of habit, and some inconsistencies between Tomcat, Jetty.
In other words Web.xml is more compatible and consistent between containers.
- When is appropriate to inject dependencies? Generally use DI whenever you use "new" and only create POJOs on the
stack.  DI automatically defers loading of dependencies to optimize startup.  Eg, Loads class files, but not objects
until they are needed.
- Explain how we wire up dependency injection via in CS (so I can mirror).  Use Servlet Context Listeners, which
are the primary hook for when your app loads up - getModules is where the magic is for Guice.  Modules are def'ns
for what beans get wired to which other beans, with a namespace.
- Probably this will also involve standing up some configuration code, especially when I start
introducing dependencies like S3 and SQS
- Explain rules of thumb for code organization - generally across seams in your app - eg controllers (external
endpoint def'n and communication), services which are business logic to do stuff, a Repo tier.
- Good basic MVP project for all of this stuff is here:
https://github.com/patrickianwilson/blog-testing-demonstration


TODOS:
** IN PRIORITY ORDER, WITH COMPLETED AT THE BOTTOM ***

Handling POST of complex content types, storing to S3:
- Create a BlobStore service implemented with S3.  Figure out how to handle config for this.
- Accept a student picture as part of the students POST endpoint, upload it to blob store, and return the URL in GET
- Configure the file upload to happen asynchronously (not on a serving thread)
- More JMeter load tests to stress this.

Using SQS for batch processing of messages:
- Use /rosters endpoint to post a OneRoster standard CSV that populates the /students endpoint
- Develop a separate processor that reads from the queue and adds students using the /students endpoint
- Might involve throwing data in a database somewhere to keep memory from blowing up.

Logging and other Metrics?
Adding an external Cache?

Basic AutoScaling App:
- DONE Figure out why index.jsp is not serving up
- DONE Switch to integrated Gradle build
- DONE Switch to RestEasy with Guice DI
- DONE Get Unit Tests Working and running for basic app.
- DONE Add dependency injection via Guice rather than the Jersey injectors
- DONE Get /students endpoint POST and GET working with POJOs and simple in-memory storage.
- DONE Add logging
- DONE Simulate an increased workload per request with some kind of busywork, that can be switched with a query param.
- DONE Develop a JMeter test to stress the /students endpoint
- DONE Deploy this to EC2 with a Tomcat container
- DONE Deploy JMeter tests to EC2 to stress app instances there
- DONE Try to deploy autoscaling groups based on a coarse measure, like CPU usage.
- DONE Swagger docs?

