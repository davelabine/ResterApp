// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`FilterableStudentList renders without crashing and matches the last snapshot 1`] = `
<FilterableStudentList
  filter=""
  onAddStudent={[Function]}
  onDeleteStudent={[Function]}
  onFetchStudents={[Function]}
  onFilterStudents={[Function]}
  onUpdateStudent={[Function]}
  students={
    Array [
      Object {
        "firstName": "Billy",
        "id": "8a80810d5dd89a3f015dd89ac8280000",
        "lastName": "Bob",
        "photo": Object {
          "bucketName": "resterapp-dev",
          "key": "e93ecbf0-ba96-4290-a906-5ea67e4c4a9f",
        },
        "studentId": "1234",
      },
      Object {
        "firstName": "Albert",
        "id": "8a80810d5dd89a3f015dd8a252800001",
        "lastName": "Russel",
        "photo": Object {
          "bucketName": "resterapp-dev",
          "key": "e93ecbf0-ba96-4290-a906-5ea67e4c4a9f",
        },
        "studentId": "503074",
      },
    ]
  }
>
  <div
    className="filterableStudentList"
  >
    <Well
      bsClass="well"
    >
      <div
        className="well"
      >
        <StudentListFilterForm
          filter=""
          onAddStudent={[Function]}
          onFilterStudents={[Function]}
        >
          <Form
            bsClass="form"
            componentClass="form"
            horizontal={false}
            inline={true}
          >
            <form
              className="form-inline"
            >
              <FormGroup
                bsClass="form-group"
                controlId="formFilterStudents"
              >
                <div
                  className="form-group"
                >
                  <ControlLabel
                    bsClass="control-label"
                    srOnly={false}
                  >
                    <label
                      className="control-label"
                      htmlFor="formFilterStudents"
                    >
                      Search Last Name:
                    </label>
                  </ControlLabel>
                  <FormControl
                    bsClass="form-control"
                    componentClass="input"
                    onChange={[Function]}
                    type="text"
                    value=""
                  >
                    <input
                      className="form-control"
                      id="formFilterStudents"
                      onChange={[Function]}
                      type="text"
                      value=""
                    />
                  </FormControl>
                  <Button
                    active={false}
                    block={false}
                    bsClass="btn"
                    bsStyle="default"
                    className="pull-right"
                    disabled={false}
                    onClick={[Function]}
                    type="button"
                  >
                    <button
                      className="pull-right btn btn-default"
                      disabled={false}
                      onClick={[Function]}
                      type="button"
                    >
                      Add Student
                    </button>
                  </Button>
                </div>
              </FormGroup>
              <EditStudentModal
                initialStudent={StudentData {}}
                onHide={[Function]}
                onSubmit={[Function]}
                show={false}
                submitButtonText="Add Student"
                title="Add Student"
              >
                <div
                  className="static-modal"
                >
                  <Modal
                    animation={true}
                    autoFocus={true}
                    backdrop={true}
                    bsClass="modal"
                    dialogClassName="custom-modal"
                    dialogComponentClass={[Function]}
                    enforceFocus={true}
                    keyboard={true}
                    manager={
                      ModalManager {
                        "add": [Function],
                        "containers": Array [],
                        "data": Array [],
                        "handleContainerOverflow": true,
                        "hideSiblingNodes": true,
                        "isTopModal": [Function],
                        "modals": Array [],
                        "remove": [Function],
                      }
                    }
                    onHide={[Function]}
                    renderBackdrop={[Function]}
                    restoreFocus={true}
                    show={false}
                  >
                    <Modal
                      autoFocus={true}
                      backdrop={true}
                      backdropClassName="modal-backdrop"
                      backdropTransitionTimeout={150}
                      containerClassName="modal-open"
                      dialogTransitionTimeout={300}
                      enforceFocus={true}
                      keyboard={true}
                      manager={
                        ModalManager {
                          "add": [Function],
                          "containers": Array [],
                          "data": Array [],
                          "handleContainerOverflow": true,
                          "hideSiblingNodes": true,
                          "isTopModal": [Function],
                          "modals": Array [],
                          "remove": [Function],
                        }
                      }
                      onEntering={[Function]}
                      onExited={[Function]}
                      onHide={[Function]}
                      renderBackdrop={[Function]}
                      restoreFocus={true}
                      show={false}
                      transition={[Function]}
                    />
                  </Modal>
                </div>
              </EditStudentModal>
            </form>
          </Form>
        </StudentListFilterForm>
        <StudentListItems
          filter=""
          onDeleteStudent={[Function]}
          onUpdateStudent={[Function]}
          students={
            Array [
              Object {
                "firstName": "Billy",
                "id": "8a80810d5dd89a3f015dd89ac8280000",
                "lastName": "Bob",
                "photo": Object {
                  "bucketName": "resterapp-dev",
                  "key": "e93ecbf0-ba96-4290-a906-5ea67e4c4a9f",
                },
                "studentId": "1234",
              },
              Object {
                "firstName": "Albert",
                "id": "8a80810d5dd89a3f015dd8a252800001",
                "lastName": "Russel",
                "photo": Object {
                  "bucketName": "resterapp-dev",
                  "key": "e93ecbf0-ba96-4290-a906-5ea67e4c4a9f",
                },
                "studentId": "503074",
              },
            ]
          }
        >
          <div>
            <Table
              bordered={false}
              bsClass="table"
              condensed={true}
              hover={true}
              responsive={false}
              striped={true}
            >
              <table
                className="table table-striped table-condensed table-hover"
              >
                <thead
                  className="studentListItemsHead"
                >
                  <tr>
                    <th>
                      Last Name
                    </th>
                    <th>
                      First Name
                    </th>
                    <th>
                      ID
                    </th>
                    <th>
                      URL
                    </th>
                  </tr>
                </thead>
                <tbody
                  className="studentListItemsBody"
                >
                  <StudentListItem
                    key="8a80810d5dd89a3f015dd89ac8280000"
                    onDeleteStudent={[Function]}
                    onUpdateStudent={[Function]}
                    student={
                      Object {
                        "firstName": "Billy",
                        "id": "8a80810d5dd89a3f015dd89ac8280000",
                        "lastName": "Bob",
                        "photo": Object {
                          "bucketName": "resterapp-dev",
                          "key": "e93ecbf0-ba96-4290-a906-5ea67e4c4a9f",
                        },
                        "studentId": "1234",
                      }
                    }
                  >
                    <tr>
                      <td>
                        Bob
                      </td>
                      <td>
                        Billy
                      </td>
                      <td>
                        1234
                      </td>
                      <td>
                        <ButtonGroup
                          block={false}
                          bsClass="btn-group"
                          justified={false}
                          vertical={false}
                        >
                          <div
                            className="btn-group"
                          >
                            <Button
                              active={false}
                              block={false}
                              bsClass="btn"
                              bsStyle="default"
                              disabled={false}
                              id="edit"
                              onClick={[Function]}
                            >
                              <button
                                className="btn btn-default"
                                disabled={false}
                                id="edit"
                                onClick={[Function]}
                                type="button"
                              >
                                <Glyphicon
                                  bsClass="glyphicon"
                                  glyph="pencil"
                                >
                                  <span
                                    className="glyphicon glyphicon-pencil"
                                  />
                                </Glyphicon>
                              </button>
                            </Button>
                            <Button
                              active={false}
                              block={false}
                              bsClass="btn"
                              bsStyle="default"
                              disabled={false}
                              id="delete"
                              onClick={[Function]}
                            >
                              <button
                                className="btn btn-default"
                                disabled={false}
                                id="delete"
                                onClick={[Function]}
                                type="button"
                              >
                                <Glyphicon
                                  bsClass="glyphicon"
                                  glyph="trash"
                                >
                                  <span
                                    className="glyphicon glyphicon-trash"
                                  />
                                </Glyphicon>
                              </button>
                            </Button>
                          </div>
                        </ButtonGroup>
                        <EditStudentModal
                          initialStudent={
                            Object {
                              "firstName": "Billy",
                              "id": "8a80810d5dd89a3f015dd89ac8280000",
                              "lastName": "Bob",
                              "photo": Object {
                                "bucketName": "resterapp-dev",
                                "key": "e93ecbf0-ba96-4290-a906-5ea67e4c4a9f",
                              },
                              "studentId": "1234",
                            }
                          }
                          onHide={[Function]}
                          onSubmit={[Function]}
                          show={false}
                          submitButtonText="Save"
                          title="Edit Bob"
                        >
                          <div
                            className="static-modal"
                          >
                            <Modal
                              animation={true}
                              autoFocus={true}
                              backdrop={true}
                              bsClass="modal"
                              dialogClassName="custom-modal"
                              dialogComponentClass={[Function]}
                              enforceFocus={true}
                              keyboard={true}
                              manager={
                                ModalManager {
                                  "add": [Function],
                                  "containers": Array [],
                                  "data": Array [],
                                  "handleContainerOverflow": true,
                                  "hideSiblingNodes": true,
                                  "isTopModal": [Function],
                                  "modals": Array [],
                                  "remove": [Function],
                                }
                              }
                              onHide={[Function]}
                              renderBackdrop={[Function]}
                              restoreFocus={true}
                              show={false}
                            >
                              <Modal
                                autoFocus={true}
                                backdrop={true}
                                backdropClassName="modal-backdrop"
                                backdropTransitionTimeout={150}
                                containerClassName="modal-open"
                                dialogTransitionTimeout={300}
                                enforceFocus={true}
                                keyboard={true}
                                manager={
                                  ModalManager {
                                    "add": [Function],
                                    "containers": Array [],
                                    "data": Array [],
                                    "handleContainerOverflow": true,
                                    "hideSiblingNodes": true,
                                    "isTopModal": [Function],
                                    "modals": Array [],
                                    "remove": [Function],
                                  }
                                }
                                onEntering={[Function]}
                                onExited={[Function]}
                                onHide={[Function]}
                                renderBackdrop={[Function]}
                                restoreFocus={true}
                                show={false}
                                transition={[Function]}
                              />
                            </Modal>
                          </div>
                        </EditStudentModal>
                      </td>
                    </tr>
                  </StudentListItem>
                  <StudentListItem
                    key="8a80810d5dd89a3f015dd8a252800001"
                    onDeleteStudent={[Function]}
                    onUpdateStudent={[Function]}
                    student={
                      Object {
                        "firstName": "Albert",
                        "id": "8a80810d5dd89a3f015dd8a252800001",
                        "lastName": "Russel",
                        "photo": Object {
                          "bucketName": "resterapp-dev",
                          "key": "e93ecbf0-ba96-4290-a906-5ea67e4c4a9f",
                        },
                        "studentId": "503074",
                      }
                    }
                  >
                    <tr>
                      <td>
                        Russel
                      </td>
                      <td>
                        Albert
                      </td>
                      <td>
                        503074
                      </td>
                      <td>
                        <ButtonGroup
                          block={false}
                          bsClass="btn-group"
                          justified={false}
                          vertical={false}
                        >
                          <div
                            className="btn-group"
                          >
                            <Button
                              active={false}
                              block={false}
                              bsClass="btn"
                              bsStyle="default"
                              disabled={false}
                              id="edit"
                              onClick={[Function]}
                            >
                              <button
                                className="btn btn-default"
                                disabled={false}
                                id="edit"
                                onClick={[Function]}
                                type="button"
                              >
                                <Glyphicon
                                  bsClass="glyphicon"
                                  glyph="pencil"
                                >
                                  <span
                                    className="glyphicon glyphicon-pencil"
                                  />
                                </Glyphicon>
                              </button>
                            </Button>
                            <Button
                              active={false}
                              block={false}
                              bsClass="btn"
                              bsStyle="default"
                              disabled={false}
                              id="delete"
                              onClick={[Function]}
                            >
                              <button
                                className="btn btn-default"
                                disabled={false}
                                id="delete"
                                onClick={[Function]}
                                type="button"
                              >
                                <Glyphicon
                                  bsClass="glyphicon"
                                  glyph="trash"
                                >
                                  <span
                                    className="glyphicon glyphicon-trash"
                                  />
                                </Glyphicon>
                              </button>
                            </Button>
                          </div>
                        </ButtonGroup>
                        <EditStudentModal
                          initialStudent={
                            Object {
                              "firstName": "Albert",
                              "id": "8a80810d5dd89a3f015dd8a252800001",
                              "lastName": "Russel",
                              "photo": Object {
                                "bucketName": "resterapp-dev",
                                "key": "e93ecbf0-ba96-4290-a906-5ea67e4c4a9f",
                              },
                              "studentId": "503074",
                            }
                          }
                          onHide={[Function]}
                          onSubmit={[Function]}
                          show={false}
                          submitButtonText="Save"
                          title="Edit Russel"
                        >
                          <div
                            className="static-modal"
                          >
                            <Modal
                              animation={true}
                              autoFocus={true}
                              backdrop={true}
                              bsClass="modal"
                              dialogClassName="custom-modal"
                              dialogComponentClass={[Function]}
                              enforceFocus={true}
                              keyboard={true}
                              manager={
                                ModalManager {
                                  "add": [Function],
                                  "containers": Array [],
                                  "data": Array [],
                                  "handleContainerOverflow": true,
                                  "hideSiblingNodes": true,
                                  "isTopModal": [Function],
                                  "modals": Array [],
                                  "remove": [Function],
                                }
                              }
                              onHide={[Function]}
                              renderBackdrop={[Function]}
                              restoreFocus={true}
                              show={false}
                            >
                              <Modal
                                autoFocus={true}
                                backdrop={true}
                                backdropClassName="modal-backdrop"
                                backdropTransitionTimeout={150}
                                containerClassName="modal-open"
                                dialogTransitionTimeout={300}
                                enforceFocus={true}
                                keyboard={true}
                                manager={
                                  ModalManager {
                                    "add": [Function],
                                    "containers": Array [],
                                    "data": Array [],
                                    "handleContainerOverflow": true,
                                    "hideSiblingNodes": true,
                                    "isTopModal": [Function],
                                    "modals": Array [],
                                    "remove": [Function],
                                  }
                                }
                                onEntering={[Function]}
                                onExited={[Function]}
                                onHide={[Function]}
                                renderBackdrop={[Function]}
                                restoreFocus={true}
                                show={false}
                                transition={[Function]}
                              />
                            </Modal>
                          </div>
                        </EditStudentModal>
                      </td>
                    </tr>
                  </StudentListItem>
                </tbody>
              </table>
            </Table>
          </div>
        </StudentListItems>
      </div>
    </Well>
  </div>
</FilterableStudentList>
`;
